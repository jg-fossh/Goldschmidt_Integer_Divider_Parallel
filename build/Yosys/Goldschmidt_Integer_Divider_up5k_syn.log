
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4245 (git sha1 2e421feb, gcc 10.3.0-1ubuntu1~20.10 -fPIC -Os)


-- Executing script file `syn_ice40.ys' --

1. Executing Verilog-2005 frontend: ../../source/Goldschmidt_Integer_Divider_2CPS.v
Parsing Verilog input from `../../source/Goldschmidt_Integer_Divider_2CPS.v' to AST representation.
Generating RTLIL representation for module `\Goldschmidt_Integer_Divider'.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider

2.2.2. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$465 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$458 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$454 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$447 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$444 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$441 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$438 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$435 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$427 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$420 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$416 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$409 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$406 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$403 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$400 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$397 in module SB_DFFSR.
Marked 44 switch rules as full_case in process $proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:484$171 in module Goldschmidt_Integer_Divider.
Marked 3 switch rules as full_case in process $proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165 in module Goldschmidt_Integer_Divider.
Marked 14 switch rules as full_case in process $proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143 in module Goldschmidt_Integer_Divider.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 11 redundant assignments.
Promoted 24 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$468'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$464'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$457'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$453'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$446'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$443'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$440'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$437'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$434'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$432'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$430'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$426'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$419'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$415'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$408'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$405'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$402'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$399'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$396'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$394'.
  Set init value: \Q = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$465'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$454'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$444'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$438'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$427'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$416'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$406'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$400'.

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$468'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$465'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$464'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$458'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$457'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$454'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$453'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$447'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$446'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$444'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$443'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$441'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$440'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$438'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$437'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$435'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$434'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$433'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$432'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$431'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$430'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$427'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$426'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$420'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$419'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$416'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$415'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$409'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$408'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$406'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$405'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$403'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$402'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$400'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$399'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$397'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$396'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$395'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$394'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$393'.
Creating decoders for process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:504$216'.
     1/1: $0\r_product[127:0]
Creating decoders for process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:484$171'.
     1/45: $44\w_lut_value[31:0]
     2/45: $43\w_lut_value[31:0]
     3/45: $42\w_lut_value[31:0]
     4/45: $41\w_lut_value[31:0]
     5/45: $40\w_lut_value[31:0]
     6/45: $39\w_lut_value[31:0]
     7/45: $38\w_lut_value[31:0]
     8/45: $37\w_lut_value[31:0]
     9/45: $36\w_lut_value[31:0]
    10/45: $35\w_lut_value[31:0]
    11/45: $34\w_lut_value[31:0]
    12/45: $33\w_lut_value[31:0]
    13/45: $32\w_lut_value[31:0]
    14/45: $31\w_lut_value[31:0]
    15/45: $30\w_lut_value[31:0]
    16/45: $29\w_lut_value[31:0]
    17/45: $28\w_lut_value[31:0]
    18/45: $27\w_lut_value[31:0]
    19/45: $26\w_lut_value[31:0]
    20/45: $25\w_lut_value[31:0]
    21/45: $24\w_lut_value[31:0]
    22/45: $23\w_lut_value[31:0]
    23/45: $22\w_lut_value[31:0]
    24/45: $21\w_lut_value[31:0]
    25/45: $20\w_lut_value[31:0]
    26/45: $19\w_lut_value[31:0]
    27/45: $18\w_lut_value[31:0]
    28/45: $17\w_lut_value[31:0]
    29/45: $16\w_lut_value[31:0]
    30/45: $15\w_lut_value[31:0]
    31/45: $14\w_lut_value[31:0]
    32/45: $13\w_lut_value[31:0]
    33/45: $12\w_lut_value[31:0]
    34/45: $11\w_lut_value[31:0]
    35/45: $10\w_lut_value[31:0]
    36/45: $9\w_lut_value[31:0]
    37/45: $8\w_lut_value[31:0]
    38/45: $7\w_lut_value[31:0]
    39/45: $6\w_lut_value[31:0]
    40/45: $5\w_lut_value[31:0]
    41/45: $4\w_lut_value[31:0]
    42/45: $3\w_lut_value[31:0]
    43/45: $2\w_lut_value[31:0]
    44/45: $1\iter[31:0]
    45/45: $1\w_lut_value[31:0]
Creating decoders for process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165'.
     1/3: $0\r_div_wb4_stall[0:0]
     2/3: $0\r_div_wb4_stb[0:0]
     3/3: $0\r_div_wb4_result[31:0]
Creating decoders for process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
     1/11: $0\r_div_acc_state[5:0]
     2/11: $0\r_div_acc_ack[0:0]
     3/11: $0\r_div_acc_stall[0:0]
     4/11: $0\r_div_acc_stb[0:0]
     5/11: $0\r_converged[0:0]
     6/11: $0\r_signed_extend[0:0]
     7/11: $0\r_calc_remainder[0:0]
     8/11: $0\r_divisor[31:0]
     9/11: $0\r_multiplier[63:0]
    10/11: $0\r_multiplicand[63:0]
    11/11: $0\r_dividend[31:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\Goldschmidt_Integer_Divider.\iter' from process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:484$171': $auto$proc_dlatch.cc:427:proc_dlatch$1281
Latch inferred for signal `\Goldschmidt_Integer_Divider.\w_lut_value' from process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:484$171': $auto$proc_dlatch.cc:427:proc_dlatch$1892

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$465'.
  created $adff cell `$procdff$1893' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$458'.
  created $dff cell `$procdff$1894' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$454'.
  created $adff cell `$procdff$1895' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$447'.
  created $dff cell `$procdff$1896' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$444'.
  created $adff cell `$procdff$1897' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$441'.
  created $dff cell `$procdff$1898' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$438'.
  created $adff cell `$procdff$1899' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$435'.
  created $dff cell `$procdff$1900' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$433'.
  created $dff cell `$procdff$1901' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$431'.
  created $dff cell `$procdff$1902' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$427'.
  created $adff cell `$procdff$1903' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$420'.
  created $dff cell `$procdff$1904' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$416'.
  created $adff cell `$procdff$1905' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$409'.
  created $dff cell `$procdff$1906' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$406'.
  created $adff cell `$procdff$1907' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$403'.
  created $dff cell `$procdff$1908' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$400'.
  created $adff cell `$procdff$1909' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$397'.
  created $dff cell `$procdff$1910' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$395'.
  created $dff cell `$procdff$1911' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$393'.
  created $dff cell `$procdff$1912' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_product' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:504$216'.
  created $dff cell `$procdff$1913' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_wb4_stb' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165'.
  created $dff cell `$procdff$1914' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_wb4_result' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165'.
  created $dff cell `$procdff$1915' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_wb4_stall' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165'.
  created $dff cell `$procdff$1916' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_acc_state' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1917' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_dividend' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1918' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_multiplicand' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1919' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_multiplier' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1920' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_divisor' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1921' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_calc_remainder' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1922' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_signed_extend' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1923' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_converged' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1924' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_acc_stb' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1925' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_acc_stall' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1926' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider.\r_div_acc_ack' using process `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
  created $dff cell `$procdff$1927' with positive edge clock.

2.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$468'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$465'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1346$465'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$464'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$458'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1290$458'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$457'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$454'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1215$454'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$453'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$447'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1159$447'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$446'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1090$444'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$443'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$441'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1042$441'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$440'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:973$438'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$437'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$435'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:925$435'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$434'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$433'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:882$433'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$432'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:846$431'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$430'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$427'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:769$427'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$426'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$420'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:713$420'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$419'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$416'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:638$416'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$415'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$409'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:582$409'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$408'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:513$406'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$405'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$403'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:465$403'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$402'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:396$400'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$399'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$397'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:348$397'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$396'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$395'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:305$395'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$394'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:269$393'.
Found and cleaned up 1 empty switch in `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:504$216'.
Removing empty process `Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:504$216'.
Found and cleaned up 44 empty switches in `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:484$171'.
Removing empty process `Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:484$171'.
Found and cleaned up 3 empty switches in `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165'.
Removing empty process `Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:450$165'.
Found and cleaned up 14 empty switches in `\Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
Removing empty process `Goldschmidt_Integer_Divider.$proc$../../source/Goldschmidt_Integer_Divider_2CPS.v:241$143'.
Cleaned up 80 empty switches.

2.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~384 debug messages>

2.4. Executing FLATTEN pass (flatten design).

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 16 unused cells and 602 unused wires.
<suppressed ~21 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
Checking module Goldschmidt_Integer_Divider...
Found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~84 debug messages>
Removed a total of 28 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 38 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Goldschmidt_Integer_Divider.r_div_acc_state as FSM state register:
    Users of register don't seem to benefit from recoding.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~25 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1926 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1048_Y, Q = \r_div_acc_stall).
Adding SRST signal on $procdff$1925 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1084_Y, Q = \r_div_acc_stb, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1943 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1084_Y, Q = \r_div_acc_stb).
Adding SRST signal on $procdff$1924 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1101_Y, Q = \r_converged, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1955 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1097_Y, Q = \r_converged).
Adding SRST signal on $procdff$1923 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1131_Y, Q = \r_signed_extend, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1967 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1116_Y, Q = \r_signed_extend).
Adding SRST signal on $procdff$1922 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1145_Y, Q = \r_calc_remainder, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1981 ($sdff) from module Goldschmidt_Integer_Divider (D = \i_wb4_slave_tgd [1], Q = \r_calc_remainder).
Adding SRST signal on $procdff$1921 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1170_Y, Q = \r_divisor, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$1985 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1166_Y, Q = \r_divisor).
Adding SRST signal on $procdff$1920 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1204_Y, Q = \r_multiplier, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$1989 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1204_Y, Q = \r_multiplier).
Adding SRST signal on $procdff$1919 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1241_Y, Q = \r_multiplicand, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$opt_dff.cc:702:run$2011 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1241_Y, Q = \r_multiplicand).
Adding SRST signal on $procdff$1918 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$1266_Y, Q = \r_dividend, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$2031 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$1262_Y, Q = \r_dividend).
Adding SRST signal on $procdff$1917 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$982_Y, Q = \r_div_acc_state, rval = 6'000001).
Adding SRST signal on $procdff$1916 ($dff) from module Goldschmidt_Integer_Divider (D = \i_wb4_master_stall, Q = \r_div_wb4_stall, rval = 1'1).
Adding SRST signal on $procdff$1915 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$928_Y, Q = \r_div_wb4_result, rval = 0).
Adding EN signal on $auto$opt_dff.cc:702:run$2037 ($sdff) from module Goldschmidt_Integer_Divider (D = \w_result, Q = \r_div_wb4_result).
Adding SRST signal on $procdff$1914 ($dff) from module Goldschmidt_Integer_Divider (D = $procmux$922_Y, Q = \r_div_wb4_stb, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$2039 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$922_Y, Q = \r_div_wb4_stb).
Adding EN signal on $procdff$1913 ($dff) from module Goldschmidt_Integer_Divider (D = $mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224_Y, Q = \r_product).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 31 unused cells and 31 unused wires.
<suppressed ~32 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~2 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 13 unused wires.
<suppressed ~1 debug messages>

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.12.23. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 6) from port B of cell Goldschmidt_Integer_Divider.$eq$../../source/Goldschmidt_Integer_Divider_2CPS.v:197$106 ($eq).
Removed top 30 bits (of 64) from port A of cell Goldschmidt_Integer_Divider.$add$../../source/Goldschmidt_Integer_Divider_2CPS.v:198$109 ($add).
Removed top 31 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$add$../../source/Goldschmidt_Integer_Divider_2CPS.v:205$114 ($add).
Removed top 30 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$eq$../../source/Goldschmidt_Integer_Divider_2CPS.v:214$134 ($eq).
Removed top 31 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$eq$../../source/Goldschmidt_Integer_Divider_2CPS.v:215$136 ($eq).
Removed top 1 bits (of 4) from port B of cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:218:make_patterns_logic$1999 ($ne).
Removed top 31 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$173 ($lt).
Removed top 1 bits (of 4) from port B of cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:218:make_patterns_logic$1947 ($ne).
Removed top 1 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$186 ($lt).
Removed top 2 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$187 ($lt).
Removed top 1 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$191 ($lt).
Removed top 1 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$193 ($lt).
Removed top 3 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$196 ($lt).
Removed top 1 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$197 ($lt).
Removed top 1 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$200 ($lt).
Removed top 2 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$201 ($lt).
Removed top 1 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$206 ($lt).
Removed top 4 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$207 ($lt).
Removed top 7 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$208 ($lt).
Removed top 11 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$209 ($lt).
Removed top 14 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$210 ($lt).
Removed top 17 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$211 ($lt).
Removed top 21 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$212 ($lt).
Removed top 24 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$213 ($lt).
Removed top 27 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$214 ($lt).
Removed top 30 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$215 ($lt).
Removed top 64 bits (of 128) from port A of cell Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224 ($mul).
Removed top 64 bits (of 128) from port B of cell Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224 ($mul).
Removed top 29 bits (of 32) from mux cell Goldschmidt_Integer_Divider.$procmux$701 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$919 ($mux).
Removed top 1 bits (of 6) from mux cell Goldschmidt_Integer_Divider.$procmux$942 ($mux).
Removed top 2 bits (of 6) from mux cell Goldschmidt_Integer_Divider.$procmux$947 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1007 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1009 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1011 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1013 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1015 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1017 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1061 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1064 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1068 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1090 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1092 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1181 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1184 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1188 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1192 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1194 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1196 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1198 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1200 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1202 ($mux).
Removed top 32 bits (of 64) from mux cell Goldschmidt_Integer_Divider.$procmux$1214 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1218 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1221 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1229 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1231 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1233 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1235 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1237 ($mux).
Removed cell Goldschmidt_Integer_Divider.$procmux$1239 ($mux).
Removed top 2 bits (of 5) from port B of cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:218:make_patterns_logic$1997 ($ne).
Removed top 2 bits (of 6) from port B of cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:218:make_patterns_logic$1995 ($ne).
Removed top 2 bits (of 7) from port B of cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:218:make_patterns_logic$1993 ($ne).
Removed top 1 bits (of 2) from port B of cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:218:make_patterns_logic$2041 ($ne).
Removed top 32 bits (of 128) from FF cell Goldschmidt_Integer_Divider.$auto$opt_dff.cc:764:run$2043 ($dffe).
Removed top 32 bits (of 128) from port Y of cell Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224 ($mul).
Removed top 29 bits (of 32) from wire Goldschmidt_Integer_Divider.$36\w_lut_value[31:0].
Removed top 32 bits (of 128) from wire Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224_Y.
Removed top 32 bits (of 64) from wire Goldschmidt_Integer_Divider.$procmux$1214_Y.
Removed top 32 bits (of 128) from wire Goldschmidt_Integer_Divider.r_product.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 33 unused wires.
<suppressed ~1 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~842 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.20. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.21. Executing WREDUCE pass (reducing word size of cells).

2.22. Executing TECHMAP pass (map to technology primitives).

2.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

2.22.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/dsp_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__MUL16X16'.
Successfully finished Verilog frontend.

2.22.3. Continuing TECHMAP pass.
Using template $paramod$cbc6866a19b9b907d93cae22a7ca51e680661234\_80_mul for cells of type $mul.
Using template $paramod$50dfda764038a960816f01d0bd9837aeb33a285a\_80_mul for cells of type $__mul.
Using template $paramod$48f1e5976394537524b6041e1470d3ab77b5c024\_80_mul for cells of type $__mul.
Using template $paramod$7a6cb4112ef1b0b14bd76e075649a6deec7d0485\_80_mul for cells of type $__mul.
Using template $paramod$92398c55cd62669b28876c227b4269e3610ebe7b\_80_mul for cells of type $__mul.
Using template $paramod$b2278dfee1667ffd72b0da92d21a5f31603ee21b\_80_mul for cells of type $__mul.
Using template $paramod$d3f75aa596adbf231344d1b46be4a5f788298998\_80_mul for cells of type $__mul.
Using template $paramod$6550b7570e584cb6e6490c38dc2b6159025477e9\$__MUL16X16 for cells of type $__MUL16X16.
Using template $paramod$c33ca6cc290ce647b4a8312d13907f93404a692e\$__MUL16X16 for cells of type $__MUL16X16.
Using template $paramod$47854eca91d30af97f481b6f686a93486e1c1fd1\$__MUL16X16 for cells of type $__MUL16X16.
Using template $paramod$dd4f77c4f43a59dc4fc9a5da28be0b6aa8496b33\$__MUL16X16 for cells of type $__MUL16X16.
No more expansions possible.
<suppressed ~673 debug messages>

2.23. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~15 debug messages>

2.24. Executing WREDUCE pass (reducing word size of cells).
Removed top 16 bits (of 48) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
Removed top 16 bits (of 32) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2062 ($add).
Removed top 16 bits (of 32) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2062 ($add).
Removed top 16 bits (of 32) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2062 ($add).
Removed top 32 bits (of 64) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 48 bits (of 64) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 31 bits (of 64) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 16 bits (of 48) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
Removed top 31 bits (of 48) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
Removed top 15 bits (of 48) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
Removed top 16 bits (of 48) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
Removed cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2069 ($add).
Removed top 16 bits (of 48) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2067 ($add).
Removed top 32 bits (of 48) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2067 ($add).
Removed top 16 bits (of 32) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2067 ($add).
Removed top 32 bits (of 48) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2067 ($add).
Removed top 32 bits (of 64) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2065 ($add).
Removed top 48 bits (of 64) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2065 ($add).
Removed top 32 bits (of 64) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2065 ($add).
Removed top 16 bits (of 80) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2051 ($add).
Removed top 32 bits (of 64) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 48 bits (of 64) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 31 bits (of 64) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 32 bits (of 64) from port A of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 48 bits (of 64) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 31 bits (of 64) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add).
Removed top 31 bits (of 48) from port B of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
Removed top 16 bits (of 48) from port Y of cell Goldschmidt_Integer_Divider.$techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).

2.25. Executing ICE40_DSP pass (map multipliers).
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[0].mul for iCE40 DSP inference.
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.mul_sliceB_last for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2062 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[1].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[0].mul for iCE40 DSP inference.
  clock: \i_clk (posedge) ffO:$auto$opt_dff.cc:764:run$2043
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.mul_sliceB_last for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2062 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[1].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[0].mul for iCE40 DSP inference.
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.mul_sliceB_last for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:230$2062 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[1].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2058 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[0].mul for iCE40 DSP inference.
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[1].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2065 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[2].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[1].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[2].mul for iCE40 DSP inference.
  adder/accumulator ($mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.blk.partial_sum[2] [79:32]) is too large (48 > 33).
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[2].mul for iCE40 DSP inference.
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[2].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA.last.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2067 ($add)
Checking Goldschmidt_Integer_Divider.$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceB[2].mul for iCE40 DSP inference.
  adder $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[2].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add)
<suppressed ~160 debug messages>

2.26. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Goldschmidt_Integer_Divider:
  creating $macc model for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060 ($add).
  creating $macc model for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:173$2055 ($add).
  creating $macc model for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2053 ($add).
  creating $macc model for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2051 ($add).
  creating $macc model for $add$../../source/Goldschmidt_Integer_Divider_2CPS.v:198$109 ($add).
  creating $macc model for $add$../../source/Goldschmidt_Integer_Divider_2CPS.v:205$114 ($add).
  creating $alu model for $macc $add$../../source/Goldschmidt_Integer_Divider_2CPS.v:205$114.
  creating $alu model for $macc $add$../../source/Goldschmidt_Integer_Divider_2CPS.v:198$109.
  creating $alu model for $macc $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2051.
  creating $alu model for $macc $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2053.
  creating $alu model for $macc $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:173$2055.
  creating $alu model for $macc $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060.
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$173 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$185 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$186 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$187 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$188 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$189 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$190 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$191 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$192 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$193 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$194 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$195 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$196 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$197 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$198 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$199 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$200 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$201 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$202 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$203 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$204 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$205 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$206 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$207 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$208 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$209 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$210 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$211 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$212 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$213 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$214 ($lt): new $alu
  creating $alu model for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$215 ($lt): new $alu
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$215: $auto$alumacc.cc:485:replace_alu$2180
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$214: $auto$alumacc.cc:485:replace_alu$2191
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$213: $auto$alumacc.cc:485:replace_alu$2202
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$212: $auto$alumacc.cc:485:replace_alu$2213
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$211: $auto$alumacc.cc:485:replace_alu$2224
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$210: $auto$alumacc.cc:485:replace_alu$2235
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$209: $auto$alumacc.cc:485:replace_alu$2246
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$208: $auto$alumacc.cc:485:replace_alu$2257
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$207: $auto$alumacc.cc:485:replace_alu$2268
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$206: $auto$alumacc.cc:485:replace_alu$2279
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$205: $auto$alumacc.cc:485:replace_alu$2290
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$204: $auto$alumacc.cc:485:replace_alu$2295
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$203: $auto$alumacc.cc:485:replace_alu$2300
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$202: $auto$alumacc.cc:485:replace_alu$2305
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$201: $auto$alumacc.cc:485:replace_alu$2310
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$200: $auto$alumacc.cc:485:replace_alu$2321
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$199: $auto$alumacc.cc:485:replace_alu$2332
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$198: $auto$alumacc.cc:485:replace_alu$2337
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$197: $auto$alumacc.cc:485:replace_alu$2342
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$196: $auto$alumacc.cc:485:replace_alu$2353
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$195: $auto$alumacc.cc:485:replace_alu$2364
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$194: $auto$alumacc.cc:485:replace_alu$2369
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$193: $auto$alumacc.cc:485:replace_alu$2374
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$192: $auto$alumacc.cc:485:replace_alu$2385
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$191: $auto$alumacc.cc:485:replace_alu$2390
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$190: $auto$alumacc.cc:485:replace_alu$2401
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$189: $auto$alumacc.cc:485:replace_alu$2406
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$188: $auto$alumacc.cc:485:replace_alu$2411
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$187: $auto$alumacc.cc:485:replace_alu$2416
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$186: $auto$alumacc.cc:485:replace_alu$2427
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$185: $auto$alumacc.cc:485:replace_alu$2438
  creating $alu cell for $lt$../../source/Goldschmidt_Integer_Divider_2CPS.v:489$173: $auto$alumacc.cc:485:replace_alu$2443
  creating $alu cell for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.genblk1.genblk1.genblk1.genblk1.genblk1.genblk1.sliceA[0].mul.$add$/usr/local/bin/../share/yosys/mul2dsp.v:216$2060: $auto$alumacc.cc:485:replace_alu$2454
  creating $alu cell for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:173$2055: $auto$alumacc.cc:485:replace_alu$2457
  creating $alu cell for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2053: $auto$alumacc.cc:485:replace_alu$2460
  creating $alu cell for $techmap$mul$../../source/Goldschmidt_Integer_Divider_2CPS.v:508$224.$add$/usr/local/bin/../share/yosys/mul2dsp.v:159$2051: $auto$alumacc.cc:485:replace_alu$2463
  creating $alu cell for $add$../../source/Goldschmidt_Integer_Divider_2CPS.v:198$109: $auto$alumacc.cc:485:replace_alu$2466
  creating $alu cell for $add$../../source/Goldschmidt_Integer_Divider_2CPS.v:205$114: $auto$alumacc.cc:485:replace_alu$2469
  created 38 $alu and 0 $macc cells.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~41 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.27.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:764:run$1942 ($dffe) from module Goldschmidt_Integer_Divider (D = $procmux$1044_Y, Q = \r_div_acc_stall, rval = 1'0).

2.27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 35 unused cells and 284 unused wires.
<suppressed ~36 debug messages>

2.27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.27.9. Rerunning OPT passes. (Maybe there is more to do..)

2.27.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.27.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.27.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.27.13. Executing OPT_DFF pass (perform DFF optimizations).

2.27.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.27.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.27.16. Rerunning OPT passes. (Maybe there is more to do..)

2.27.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

2.27.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.27.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.27.20. Executing OPT_DFF pass (perform DFF optimizations).

2.27.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.27.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.27.23. Finished OPT passes. (There is nothing left to do.)

2.28. Executing MEMORY pass.

2.28.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.28.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.28.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.28.4. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.28.5. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.28.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.28.7. Executing MEMORY_COLLECT pass (generating $mem cells).

2.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.30. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.31.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.32. Executing ICE40_BRAMINIT pass.

2.33. Executing OPT pass (performing simple optimizations).

2.33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~92 debug messages>

2.33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~699 debug messages>
Removed a total of 233 cells.

2.33.3. Executing OPT_DFF pass (perform DFF optimizations).

2.33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 31 unused cells and 286 unused wires.
<suppressed ~32 debug messages>

2.33.5. Finished fast OPT passes.

2.34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.35. Executing OPT pass (performing simple optimizations).

2.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

2.35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$695:
      Old ports: A=42, B={ 29'00000000000000000000000000000 $36\w_lut_value[31:0] }, Y=$37\w_lut_value[31:0]
      New ports: A=4'1010, B={ 1'0 $36\w_lut_value[31:0] }, Y=$37\w_lut_value[31:0] [3:0]
      New connections: $37\w_lut_value[31:0] [31:4] = { 26'00000000000000000000000000 $37\w_lut_value[31:0] [3] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$701:
      Old ports: A=3'100, B=3'000, Y=$36\w_lut_value[31:0]
      New ports: A=1'1, B=1'0, Y=$36\w_lut_value[31:0] [2]
      New connections: $36\w_lut_value[31:0] [1:0] = 2'00
    Consolidated identical input bits for $mux cell $procmux$935:
      Old ports: A=6'000001, B=6'100000, Y=$procmux$935_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$935_Y [5] $procmux$935_Y [0] }
      New connections: $procmux$935_Y [4:1] = 4'0000
    Consolidated identical input bits for $mux cell $procmux$942:
      Old ports: A=5'00100, B=5'10000, Y=$procmux$942_Y [4:0]
      New ports: A=2'01, B=2'10, Y={ $procmux$942_Y [4] $procmux$942_Y [2] }
      New connections: { $procmux$942_Y [3] $procmux$942_Y [1:0] } = 3'000
    Consolidated identical input bits for $mux cell $procmux$947:
      Old ports: A=4'1000, B=4'0001, Y=$procmux$947_Y [3:0]
      New ports: A=2'10, B=2'01, Y={ $procmux$947_Y [3] $procmux$947_Y [0] }
      New connections: $procmux$947_Y [2:1] = 2'00
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$689:
      Old ports: A=429, B=$37\w_lut_value[31:0], Y=$38\w_lut_value[31:0]
      New ports: A=5'11101, B={ 1'0 $37\w_lut_value[31:0] [3:0] }, Y={ $38\w_lut_value[31:0] [7] $38\w_lut_value[31:0] [3:0] }
      New connections: { $38\w_lut_value[31:0] [31:8] $38\w_lut_value[31:0] [6:4] } = { 23'00000000000000000000000 $38\w_lut_value[31:0] [7] 1'0 $38\w_lut_value[31:0] [3] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$695:
      Old ports: A=4'1010, B={ 1'0 $36\w_lut_value[31:0] }, Y=$37\w_lut_value[31:0] [3:0]
      New ports: A=2'01, B={ $36\w_lut_value[31:0] [2] 1'0 }, Y=$37\w_lut_value[31:0] [2:1]
      New connections: { $37\w_lut_value[31:0] [3] $37\w_lut_value[31:0] [0] } = { $37\w_lut_value[31:0] [1] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$937:
      Old ports: A=6'000001, B=$procmux$935_Y, Y=$procmux$937_Y
      New ports: A=2'01, B={ $procmux$935_Y [5] $procmux$935_Y [0] }, Y={ $procmux$937_Y [5] $procmux$937_Y [0] }
      New connections: $procmux$937_Y [4:1] = 4'0000
    Consolidated identical input bits for $mux cell $procmux$958:
      Old ports: A=6'000010, B=$procmux$935_Y, Y=$procmux$958_Y
      New ports: A=3'010, B={ $procmux$935_Y [5] 1'0 $procmux$935_Y [0] }, Y={ $procmux$958_Y [5] $procmux$958_Y [1:0] }
      New connections: $procmux$958_Y [4:2] = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$683:
      Old ports: A=4294, B=$38\w_lut_value[31:0], Y=$39\w_lut_value[31:0]
      New ports: A=7'0110110, B={ $38\w_lut_value[31:0] [7] $38\w_lut_value[31:0] [7] 1'0 $38\w_lut_value[31:0] [3:0] }, Y={ $39\w_lut_value[31:0] [8:6] $39\w_lut_value[31:0] [3:0] }
      New connections: { $39\w_lut_value[31:0] [31:9] $39\w_lut_value[31:0] [5:4] } = { 19'0000000000000000000 $39\w_lut_value[31:0] [6] 3'000 $39\w_lut_value[31:0] [3] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$689:
      Old ports: A=5'11101, B={ 1'0 $37\w_lut_value[31:0] [3:0] }, Y={ $38\w_lut_value[31:0] [7] $38\w_lut_value[31:0] [3:0] }
      New ports: A=4'1101, B={ $37\w_lut_value[31:0] [1] $37\w_lut_value[31:0] [2:1] 1'0 }, Y=$38\w_lut_value[31:0] [3:0]
      New connections: $38\w_lut_value[31:0] [7] = $38\w_lut_value[31:0] [0]
    Consolidated identical input bits for $mux cell $procmux$939:
      Old ports: A=$procmux$937_Y, B=6'100000, Y=$procmux$939_Y
      New ports: A={ $procmux$937_Y [5] $procmux$937_Y [0] }, B=2'10, Y={ $procmux$939_Y [5] $procmux$939_Y [0] }
      New connections: $procmux$939_Y [4:1] = 4'0000
    Consolidated identical input bits for $mux cell $procmux$963:
      Old ports: A=$procmux$958_Y, B={ $procmux$935_Y [5] 4'0000 $procmux$935_Y [0] }, Y=$procmux$963_Y
      New ports: A={ $procmux$958_Y [5] $procmux$958_Y [1:0] }, B={ $procmux$935_Y [5] 1'0 $procmux$935_Y [0] }, Y={ $procmux$963_Y [5] $procmux$963_Y [1:0] }
      New connections: $procmux$963_Y [4:2] = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$677:
      Old ports: A=42949, B=$39\w_lut_value[31:0], Y=$40\w_lut_value[31:0]
      New ports: A=9'011110101, B={ $39\w_lut_value[31:0] [6] 1'0 $39\w_lut_value[31:0] [8:6] $39\w_lut_value[31:0] [3:0] }, Y={ $40\w_lut_value[31:0] [12] $40\w_lut_value[31:0] [9:6] $40\w_lut_value[31:0] [3:0] }
      New connections: { $40\w_lut_value[31:0] [31:13] $40\w_lut_value[31:0] [11:10] $40\w_lut_value[31:0] [5:4] } = { 16'0000000000000000 $40\w_lut_value[31:0] [9] 1'0 $40\w_lut_value[31:0] [9] 1'0 $40\w_lut_value[31:0] [9] $40\w_lut_value[31:0] [3] 1'0 }
    Consolidated identical input bits for $mux cell $procmux$683:
      Old ports: A=7'0110110, B={ $38\w_lut_value[31:0] [7] $38\w_lut_value[31:0] [7] 1'0 $38\w_lut_value[31:0] [3:0] }, Y={ $39\w_lut_value[31:0] [8:6] $39\w_lut_value[31:0] [3:0] }
      New ports: A=6'110110, B={ $38\w_lut_value[31:0] [0] 1'0 $38\w_lut_value[31:0] [3:0] }, Y={ $39\w_lut_value[31:0] [7:6] $39\w_lut_value[31:0] [3:0] }
      New connections: $39\w_lut_value[31:0] [8] = $39\w_lut_value[31:0] [0]
    Consolidated identical input bits for $mux cell $procmux$944:
      Old ports: A=$procmux$939_Y, B={ 1'0 $procmux$942_Y [4] 1'0 $procmux$942_Y [2] 2'00 }, Y=$procmux$944_Y
      New ports: A={ $procmux$939_Y [5] 2'00 $procmux$939_Y [0] }, B={ 1'0 $procmux$942_Y [4] $procmux$942_Y [2] 1'0 }, Y={ $procmux$944_Y [5:4] $procmux$944_Y [2] $procmux$944_Y [0] }
      New connections: { $procmux$944_Y [3] $procmux$944_Y [1] } = 2'00
    Consolidated identical input bits for $mux cell $procmux$968:
      Old ports: A=$procmux$963_Y, B={ $procmux$935_Y [5] 4'0000 $procmux$935_Y [0] }, Y=$procmux$968_Y
      New ports: A={ $procmux$963_Y [5] $procmux$963_Y [1:0] }, B={ $procmux$935_Y [5] 1'0 $procmux$935_Y [0] }, Y={ $procmux$968_Y [5] $procmux$968_Y [1:0] }
      New connections: $procmux$968_Y [4:2] = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$671:
      Old ports: A=429496, B=$40\w_lut_value[31:0], Y=$41\w_lut_value[31:0]
      New ports: A=11'01011011000, B={ $40\w_lut_value[31:0] [12] $40\w_lut_value[31:0] [9] $40\w_lut_value[31:0] [9:6] 1'0 $40\w_lut_value[31:0] [3:0] }, Y={ $41\w_lut_value[31:0] [12] $41\w_lut_value[31:0] [10:6] $41\w_lut_value[31:0] [4:0] }
      New connections: { $41\w_lut_value[31:0] [31:13] $41\w_lut_value[31:0] [11] $41\w_lut_value[31:0] [5] } = { 13'0000000000000 $41\w_lut_value[31:0] [4] $41\w_lut_value[31:0] [4] 1'0 $41\w_lut_value[31:0] [10] 1'0 $41\w_lut_value[31:0] [9] $41\w_lut_value[31:0] [4:3] }
    Consolidated identical input bits for $mux cell $procmux$677:
      Old ports: A=9'011110101, B={ $39\w_lut_value[31:0] [6] 1'0 $39\w_lut_value[31:0] [8:6] $39\w_lut_value[31:0] [3:0] }, Y={ $40\w_lut_value[31:0] [12] $40\w_lut_value[31:0] [9:6] $40\w_lut_value[31:0] [3:0] }
      New ports: A=8'01110101, B={ $39\w_lut_value[31:0] [6] 1'0 $39\w_lut_value[31:0] [7:6] $39\w_lut_value[31:0] [3:0] }, Y={ $40\w_lut_value[31:0] [12] $40\w_lut_value[31:0] [9] $40\w_lut_value[31:0] [7:6] $40\w_lut_value[31:0] [3:0] }
      New connections: $40\w_lut_value[31:0] [8] = $40\w_lut_value[31:0] [0]
    Consolidated identical input bits for $mux cell $procmux$949:
      Old ports: A=$procmux$944_Y, B={ 2'00 $procmux$947_Y [3] 2'00 $procmux$947_Y [0] }, Y=$procmux$949_Y
      New ports: A={ $procmux$944_Y [5:4] 1'0 $procmux$944_Y [2] $procmux$944_Y [0] }, B={ 2'00 $procmux$947_Y [3] 1'0 $procmux$947_Y [0] }, Y={ $procmux$949_Y [5:2] $procmux$949_Y [0] }
      New connections: $procmux$949_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$973:
      Old ports: A=$procmux$968_Y, B={ $procmux$935_Y [5] 4'0000 $procmux$935_Y [0] }, Y=$procmux$973_Y
      New ports: A={ $procmux$968_Y [5] $procmux$968_Y [1:0] }, B={ $procmux$935_Y [5] 1'0 $procmux$935_Y [0] }, Y={ $procmux$973_Y [5] $procmux$973_Y [1:0] }
      New connections: $procmux$973_Y [4:2] = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$665:
      Old ports: A=4294967, B=$41\w_lut_value[31:0], Y=$42\w_lut_value[31:0]
      New ports: A=15'011000100110111, B={ $41\w_lut_value[31:0] [4] 1'0 $41\w_lut_value[31:0] [10] $41\w_lut_value[31:0] [12] $41\w_lut_value[31:0] [10:6] $41\w_lut_value[31:0] [3] $41\w_lut_value[31:0] [4:0] }, Y={ $42\w_lut_value[31:0] [17:15] $42\w_lut_value[31:0] [12] $42\w_lut_value[31:0] [10:0] }
      New connections: { $42\w_lut_value[31:0] [31:18] $42\w_lut_value[31:0] [14:13] $42\w_lut_value[31:0] [11] } = { 9'000000000 $42\w_lut_value[31:0] [16] 3'000 $42\w_lut_value[31:0] [17] 1'0 $42\w_lut_value[31:0] [9] $42\w_lut_value[31:0] [4] }
    Consolidated identical input bits for $mux cell $procmux$951:
      Old ports: A=$procmux$949_Y, B=6'000100, Y=$procmux$951_Y
      New ports: A={ $procmux$949_Y [5:2] $procmux$949_Y [0] }, B=5'00010, Y={ $procmux$951_Y [5:2] $procmux$951_Y [0] }
      New connections: $procmux$951_Y [1] = 1'0
    Consolidated identical input bits for $mux cell $procmux$978:
      Old ports: A=$procmux$973_Y, B={ $procmux$935_Y [5] 4'0000 $procmux$935_Y [0] }, Y=$procmux$978_Y
      New ports: A={ $procmux$973_Y [5] $procmux$973_Y [1:0] }, B={ $procmux$935_Y [5] 1'0 $procmux$935_Y [0] }, Y={ $procmux$978_Y [5] $procmux$978_Y [1:0] }
      New connections: $procmux$978_Y [4:2] = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$659:
      Old ports: A=42949672, B=$42\w_lut_value[31:0], Y=$43\w_lut_value[31:0]
      New ports: A=18'011011110000101000, B={ $42\w_lut_value[31:0] [16] $42\w_lut_value[31:0] [17:15] 1'0 $42\w_lut_value[31:0] [12] $42\w_lut_value[31:0] [4] $42\w_lut_value[31:0] [10:0] }, Y={ $43\w_lut_value[31:0] [22] $43\w_lut_value[31:0] [17:14] $43\w_lut_value[31:0] [12:0] }
      New connections: { $43\w_lut_value[31:0] [31:23] $43\w_lut_value[31:0] [21:18] $43\w_lut_value[31:0] [13] } = { 6'000000 $43\w_lut_value[31:0] [14] 1'0 $43\w_lut_value[31:0] [14] 2'00 $43\w_lut_value[31:0] [14] $43\w_lut_value[31:0] [17] $43\w_lut_value[31:0] [9] }
    Consolidated identical input bits for $mux cell $procmux$980:
      Old ports: A=6'000001, B=$procmux$978_Y, Y=$procmux$980_Y
      New ports: A=3'001, B={ $procmux$978_Y [5] $procmux$978_Y [1:0] }, Y={ $procmux$980_Y [5] $procmux$980_Y [1:0] }
      New connections: $procmux$980_Y [4:2] = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$653:
      Old ports: A=429496729, B=$43\w_lut_value[31:0], Y=$44\w_lut_value[31:0]
      New ports: A=20'01101101100110011001, B={ $43\w_lut_value[31:0] [22] 1'0 $43\w_lut_value[31:0] [14] $43\w_lut_value[31:0] [17:14] $43\w_lut_value[31:0] [12:0] }, Y={ $44\w_lut_value[31:0] [22] $44\w_lut_value[31:0] [20:19] $44\w_lut_value[31:0] [17:14] $44\w_lut_value[31:0] [12:0] }
      New connections: { $44\w_lut_value[31:0] [31:23] $44\w_lut_value[31:0] [21] $44\w_lut_value[31:0] [18] $44\w_lut_value[31:0] [13] } = { 3'000 $44\w_lut_value[31:0] [20] $44\w_lut_value[31:0] [20] 1'0 $44\w_lut_value[31:0] [14] $44\w_lut_value[31:0] [20:19] 1'0 $44\w_lut_value[31:0] [17] $44\w_lut_value[31:0] [9] }
  Optimizing cells in module \Goldschmidt_Integer_Divider.
    Consolidated identical input bits for $mux cell $procmux$913:
      Old ports: A=0, B=$44\w_lut_value[31:0], Y=$0\w_lut_value[31:0]
      New ports: A=20'00000000000000000000, B={ $44\w_lut_value[31:0] [22] $44\w_lut_value[31:0] [20:19] $44\w_lut_value[31:0] [17:14] $44\w_lut_value[31:0] [12:0] }, Y={ $0\w_lut_value[31:0] [22] $0\w_lut_value[31:0] [20:19] $0\w_lut_value[31:0] [17:14] $0\w_lut_value[31:0] [12:0] }
      New connections: { $0\w_lut_value[31:0] [31:23] $0\w_lut_value[31:0] [21] $0\w_lut_value[31:0] [18] $0\w_lut_value[31:0] [13] } = { 3'000 $0\w_lut_value[31:0] [20] $0\w_lut_value[31:0] [20] 1'0 $0\w_lut_value[31:0] [14] $0\w_lut_value[31:0] [20:19] 1'0 $0\w_lut_value[31:0] [17] $0\w_lut_value[31:0] [9] }
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 28 changes.

2.35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.35.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 1 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 2 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 3 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 4 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 5 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 6 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 7 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 8 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 9 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 10 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 11 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 12 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 13 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 14 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Setting constant 1-bit at position 15 on $auto$opt_dff.cc:764:run$2043 ($dffe) from module Goldschmidt_Integer_Divider.
Adding SRST signal on $auto$opt_dff.cc:702:run$2035 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$951_Y [2], Q = \r_div_acc_state [2], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:702:run$2035 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$947_Y [3], Q = \r_div_acc_state [3], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:702:run$2035 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$942_Y [4], Q = \r_div_acc_state [4], rval = 1'0).

2.35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.35.9. Rerunning OPT passes. (Maybe there is more to do..)

2.35.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

2.35.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.35.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.35.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 21 on $auto$proc_dlatch.cc:427:proc_dlatch$1892 ($dlatch) from module Goldschmidt_Integer_Divider.
Setting constant 0-bit at position 26 on $auto$proc_dlatch.cc:427:proc_dlatch$1892 ($dlatch) from module Goldschmidt_Integer_Divider.
Setting constant 0-bit at position 29 on $auto$proc_dlatch.cc:427:proc_dlatch$1892 ($dlatch) from module Goldschmidt_Integer_Divider.
Setting constant 0-bit at position 30 on $auto$proc_dlatch.cc:427:proc_dlatch$1892 ($dlatch) from module Goldschmidt_Integer_Divider.
Setting constant 0-bit at position 31 on $auto$proc_dlatch.cc:427:proc_dlatch$1892 ($dlatch) from module Goldschmidt_Integer_Divider.
Adding SRST signal on $auto$opt_dff.cc:702:run$2035 ($sdff) from module Goldschmidt_Integer_Divider (D = $procmux$958_Y [1], Q = \r_div_acc_state [1], rval = 1'0).

2.35.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.35.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.35.16. Rerunning OPT passes. (Maybe there is more to do..)

2.35.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.35.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.35.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.35.20. Executing OPT_DFF pass (perform DFF optimizations).

2.35.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.35.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.35.23. Finished OPT passes. (There is nothing left to do.)

2.36. Executing ICE40_WRAPCARRY pass (wrap carries).

2.37. Executing TECHMAP pass (map to technology primitives).

2.37.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.37.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.37.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$6a42b6fefed750f8a1c58eab59479d960557103c\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$cc6a978c1b57cdb49efcec348c88d8e28bf1a01f\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod$fc972a7a46956c1788f3cb5257b53c8f1df2d0cc\_90_alu for cells of type $alu.
Using template $paramod$e891e6b399cf52748460a311fafe476815d24bd7\_80_ice40_alu for cells of type $alu.
Using template $paramod$623933ad3e90fc22092cd1f55770151cf78c2317\_80_ice40_alu for cells of type $alu.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_80_ice40_alu for cells of type $alu.
Using template $paramod$b18e16801adf491a64caa0542270798e5d4ac6b6\_80_ice40_alu for cells of type $alu.
Using template $paramod$00298f3f8094950cb9a5ff2fda48d0d8bde8806c\_80_ice40_alu for cells of type $alu.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_80_ice40_alu for cells of type $alu.
Using template $paramod$484d51534650924b7ed4c69e46eed3a56904771f\_80_ice40_alu for cells of type $alu.
Using template $paramod$ec32b97001540459632a2df9accd677d3703ea0f\_80_ice40_alu for cells of type $alu.
Using template $paramod$165fdf60338663c1b1095d1639bc2761df5db061\_80_ice40_alu for cells of type $alu.
Using template $paramod$091610cd349a68bd5539cffd7126f0d76e9bca00\_80_ice40_alu for cells of type $alu.
Using template $paramod$67e8f4b8dba01cd3d8fc718acd02276257d102de\_80_ice40_alu for cells of type $alu.
Using template $paramod$12350b8c8422a70d10b7db4eaae1202a7148b784\_80_ice40_alu for cells of type $alu.
Using template $paramod$4e6ee5eb737cf7428f8e246e911ae1dac9ae2979\_80_ice40_alu for cells of type $alu.
Using template $paramod$6fc37af1c109ae54e8aed83fcd995c12d378ce93\_80_ice40_alu for cells of type $alu.
Using template $paramod$950cc9f9d9b07c09d0ee4a231126f2c8a3c4f78a\_80_ice40_alu for cells of type $alu.
Using template $paramod$b4c4de06fc9a766c2ade48f1828e2f38f1d6a877\_80_ice40_alu for cells of type $alu.
Using template $paramod$400c7651a899d7a17809b04e69e36ebc18745d70\_80_ice40_alu for cells of type $alu.
Using template $paramod$af3be6a2b2090531cefc2107e11ac6d712879f3f\_80_ice40_alu for cells of type $alu.
Using template $paramod$c85f7f36eaf20b9dfdd10e675753f6620fd8e4e5\_80_ice40_alu for cells of type $alu.
Using template $paramod$67570b4127ce7524f360108b2bcb408862bad8c6\_80_ice40_alu for cells of type $alu.
Using template $paramod$a4cd5864316cd4ed9c6832759038dc317198ba73\_80_ice40_alu for cells of type $alu.
Using template $paramod$91f82ead1edc61e0a1452110f15ef747116b421b\_80_ice40_alu for cells of type $alu.
Using template $paramod$b0777dc865134c8525a4aa84de8cfa938974cad1\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $or.
Using template $paramod$c58bf67f0959c1ef1d3f6aad98381de5bb530011\_80_ice40_alu for cells of type $alu.
Using template $paramod$c902248951c526246774c2c266eae0951dd5fd6e\_80_ice40_alu for cells of type $alu.
Using template $paramod$45bda7aa09912e054059645cb80fb66f0c7f8a2d\_80_ice40_alu for cells of type $alu.
Using template $paramod$788c3d57e5abb3a3f89aea6d4acd665be37f4e9b\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffce.
Using template $paramod$9fe62a4b81638d72bc060d25c78265035b9c879a\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000001 for cells of type $lcu.
No more expansions possible.
<suppressed ~1304 debug messages>

2.38. Executing OPT pass (performing simple optimizations).

2.38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~2674 debug messages>

2.38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~3474 debug messages>
Removed a total of 1158 cells.

2.38.3. Executing OPT_DFF pass (perform DFF optimizations).

2.38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 478 unused cells and 901 unused wires.
<suppressed ~479 debug messages>

2.38.5. Finished fast OPT passes.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2180.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2191.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2202.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2213.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2224.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2235.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2246.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2257.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2268.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2279.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2290.slice[0].carry: CO=\w_divisor [11]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2295.slice[0].carry: CO=\w_divisor [12]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2300.slice[0].carry: CO=\w_divisor [13]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2305.slice[0].carry: CO=\w_divisor [14]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2310.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2321.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2332.slice[0].carry: CO=\w_divisor [17]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2337.slice[0].carry: CO=\w_divisor [18]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2342.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2353.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2364.slice[0].carry: CO=\w_divisor [21]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2369.slice[0].carry: CO=\w_divisor [22]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2374.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2385.slice[0].carry: CO=\w_divisor [24]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2390.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2401.slice[0].carry: CO=\w_divisor [26]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2406.slice[0].carry: CO=\w_divisor [27]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2411.slice[0].carry: CO=\w_divisor [28]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2416.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2427.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2443.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2180.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2466.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$2466.B [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2469.slice[0].carry: CO=\r_product [64]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider.$auto$opt_expr.cc:1755:replace_const_cells$2478.slice[32].carry: CO=1'0

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~13 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

2.39.4. Executing OPT_DFF pass (perform DFF optimizations).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 13 unused cells and 1 unused wires.
<suppressed ~14 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.39.10. Executing OPT_DFF pass (perform DFF optimizations).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.41. Executing TECHMAP pass (map to technology primitives).

2.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.41.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~326 debug messages>

2.42. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.43. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2466.slice[0].carry ($lut).
Mapping Goldschmidt_Integer_Divider.$auto$alumacc.cc:485:replace_alu$2469.slice[0].carry ($lut).
Mapping Goldschmidt_Integer_Divider.$auto$opt_expr.cc:1755:replace_const_cells$2478.slice[32].carry ($lut).

2.44. Executing ICE40_OPT pass (performing simple optimizations).

2.44.1. Running ICE40 specific optimizations.

2.44.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~275 debug messages>

2.44.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~666 debug messages>
Removed a total of 222 cells.

2.44.4. Executing OPT_DFF pass (perform DFF optimizations).

2.44.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 1983 unused wires.
<suppressed ~1 debug messages>

2.44.6. Rerunning OPT passes. (Removed registers in this run.)

2.44.7. Running ICE40 specific optimizations.

2.44.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.44.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.44.10. Executing OPT_DFF pass (perform DFF optimizations).

2.44.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.44.12. Finished OPT passes. (There is nothing left to do.)

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.

2.45.3. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping \$_DLATCH_N_.$ternary$/usr/local/bin/../share/yosys/ice40/latches_map.v:4$10933 ($mux).
Mapping \$_DLATCH_N_.$logic_not$/usr/local/bin/../share/yosys/ice40/latches_map.v:4$10932 ($logic_not).
<suppressed ~4 debug messages>

2.45.4. Executing OPT pass (performing simple optimizations).

2.45.4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DLATCH_N_.
<suppressed ~1 debug messages>

2.45.4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DLATCH_N_'.
Removed a total of 0 cells.

2.45.4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DLATCH_N_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.45.4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DLATCH_N_.
Performed a total of 0 changes.

2.45.4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DLATCH_N_'.
Removed a total of 0 cells.

2.45.4.6. Executing OPT_DFF pass (perform DFF optimizations).

2.45.4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DLATCH_N_..
Removed 1 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

2.45.4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DLATCH_N_.

2.45.4.9. Rerunning OPT passes. (Maybe there is more to do..)

2.45.4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \$_DLATCH_N_..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.45.4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \$_DLATCH_N_.
Performed a total of 0 changes.

2.45.4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\$_DLATCH_N_'.
Removed a total of 0 cells.

2.45.4.13. Executing OPT_DFF pass (perform DFF optimizations).

2.45.4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \$_DLATCH_N_..

2.45.4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module \$_DLATCH_N_.

2.45.4.16. Finished OPT passes. (There is nothing left to do.)
Using template \$_DLATCH_N_ for cells of type $_DLATCH_N_.
No more expansions possible.
<suppressed ~20 debug messages>

2.46. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ICE40_CARRY_WRAPPER'.
Successfully finished Verilog frontend.

2.47. Executing ABC9 pass.

2.47.1. Executing ABC9_OPS pass (helper functions for ABC9).

2.47.2. Executing ABC9_OPS pass (helper functions for ABC9).

2.47.3. Executing SCC pass (detecting logic loops).
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6378.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6380.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6381.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6377.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6372.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6358.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6360.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6356.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6367.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6357.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6374.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6368.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6369.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6371.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6359.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6361.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6362.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6363.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6364.$auto$simplemap.cc:277:simplemap_mux$10935
Found an SCC: $techmap$auto$simplemap.cc:581:simplemap_dlatch$6366.$auto$simplemap.cc:277:simplemap_mux$10935
Found 20 SCCs in module Goldschmidt_Integer_Divider.
Found 20 SCCs.

2.47.4. Executing ABC9_OPS pass (helper functions for ABC9).

2.47.5. Executing PROC pass (convert processes to netlists).

2.47.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.47.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.47.5.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

2.47.5.4. Executing PROC_INIT pass (extract init attributes).

2.47.5.5. Executing PROC_ARST pass (detect async resets in processes).

2.47.5.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

2.47.5.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.47.5.8. Executing PROC_DFF pass (convert process syncs to FFs).

2.47.5.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.47.5.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.47.5.11. Executing OPT_EXPR pass (perform const folding).

2.47.6. Executing TECHMAP pass (map to technology primitives).

2.47.6.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.47.6.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~120 debug messages>

2.47.7. Executing OPT pass (performing simple optimizations).

2.47.7.1. Executing OPT_EXPR pass (perform const folding).

2.47.7.2. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.47.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Removed 0 multiplexer ports.

2.47.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Performed a total of 0 changes.

2.47.7.5. Executing OPT_MERGE pass (detect identical cells).
Removed a total of 0 cells.

2.47.7.6. Executing OPT_DFF pass (perform DFF optimizations).

2.47.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).

2.47.7.8. Executing OPT_EXPR pass (perform const folding).

2.47.7.9. Finished OPT passes. (There is nothing left to do.)

2.47.8. Executing TECHMAP pass (map to technology primitives).

2.47.8.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/abc9_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/abc9_map.v' to AST representation.
Successfully finished Verilog frontend.

2.47.8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~2 debug messages>

2.47.9. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/abc9_model.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/abc9_model.v' to AST representation.
Generating RTLIL representation for module `$__ABC9_DELAY'.
Generating RTLIL representation for module `$__ABC9_SCC_BREAKER'.
Generating RTLIL representation for module `$__DFF_N__$abc9_flop'.
Generating RTLIL representation for module `$__DFF_P__$abc9_flop'.
Successfully finished Verilog frontend.

2.47.10. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~543 debug messages>

2.47.11. Executing ABC9_OPS pass (helper functions for ABC9).

2.47.12. Executing ABC9_OPS pass (helper functions for ABC9).
<suppressed ~2 debug messages>

2.47.13. Executing TECHMAP pass (map to technology primitives).

2.47.13.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.47.13.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\SB_LUT4\LUT_INIT=16'0110100110010110 for cells of type SB_LUT4.
Using template SB_CARRY for cells of type SB_CARRY.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $logic_and.
No more expansions possible.
<suppressed ~141 debug messages>

2.47.14. Executing OPT pass (performing simple optimizations).

2.47.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.
<suppressed ~4 debug messages>

2.47.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
<suppressed ~29 debug messages>
Removed a total of 12 cells.

2.47.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.47.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.47.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.47.14.6. Executing OPT_DFF pass (perform DFF optimizations).

2.47.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.47.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.47.14.9. Rerunning OPT passes. (Maybe there is more to do..)

2.47.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.47.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider.
Performed a total of 0 changes.

2.47.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider'.
Removed a total of 0 cells.

2.47.14.13. Executing OPT_DFF pass (perform DFF optimizations).

2.47.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider..

2.47.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider.

2.47.14.16. Finished OPT passes. (There is nothing left to do.)

2.47.15. Executing AIGMAP pass (map logic to AIG).
Module Goldschmidt_Integer_Divider: replaced 7 cells with 43 new cells, skipped 11 cells.
  replaced 2 cell types:
       2 $_OR_
       5 $_MUX_
  not replaced 3 cell types:
       8 $specify2
       1 $_NOT_
       2 $_AND_

2.47.16. Executing AIGMAP pass (map logic to AIG).
Module Goldschmidt_Integer_Divider: replaced 1295 cells with 8420 new cells, skipped 2700 cells.
  replaced 3 cell types:
     215 $_OR_
      32 $_XOR_
    1048 $_MUX_
  not replaced 11 cell types:
     274 $_NOT_
     552 $_AND_
      67 SB_DFFE
       5 SB_DFFSR
       2 SB_DFFSS
     230 SB_DFFESR
      15 SB_MAC16
    1013 $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1
     304 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000000010101
       1 $__ABC9_SCC_BREAKER
     237 $paramod$__ABC9_DELAY\DELAY=32'00000000000000000000000011001011

2.47.16.1. Executing ABC9_OPS pass (helper functions for ABC9).

2.47.16.2. Executing ABC9_OPS pass (helper functions for ABC9).

2.47.16.3. Executing XAIGER backend.
<suppressed ~315 debug messages>
Extracted 4007 AND gates and 12910 wires from module `Goldschmidt_Integer_Divider' to a netlist network with 830 inputs and 898 outputs.

2.47.16.4. Executing ABC9_EXE pass (technology mapping using ABC9).

2.47.16.5. Executing ABC9.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_lut <abc-temp-dir>/input.lut 
ABC: + read_box <abc-temp-dir>/input.box 
ABC: + &read <abc-temp-dir>/input.xaig 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    830/    898  and =    3404  lev =   97 (1.10)  mem = 0.19 MB  box = 1554  bb = 541
ABC: + &scorr 
ABC: Warning: The network is combinational.
ABC: + &sweep 
ABC: + &dc2 
ABC: + &dch -f 
ABC: + &ps 
ABC: <abc-temp-dir>/input : i/o =    830/    898  and =    3382  lev =   15 (0.81)  mem = 0.15 MB  ch =  421  box = 1146  bb = 541
ABC: + &if -W 250 -v 
ABC: K = 4. Memory (bytes): Truth =    0. Cut =   48. Obj =  128. Set =  528. CutMin = no
ABC: Node =    3382.  Ch =   374.  Total mem =    1.43 MB. Peak cut mem =    0.04 MB.
ABC: P:  Del = 11322.00.  Ar =    1008.0.  Edge =     3595.  Cut =    18747.  T =     0.00 sec
ABC: P:  Del = 11322.00.  Ar =     906.0.  Edge =     3353.  Cut =    18071.  T =     0.00 sec
ABC: P:  Del = 11322.00.  Ar =     710.0.  Edge =     2523.  Cut =    19951.  T =     0.00 sec
ABC: F:  Del = 11322.00.  Ar =     703.0.  Edge =     2477.  Cut =    20132.  T =     0.00 sec
ABC: A:  Del = 11322.00.  Ar =     693.0.  Edge =     2290.  Cut =    20254.  T =     0.01 sec
ABC: A:  Del = 11322.00.  Ar =     692.0.  Edge =     2288.  Cut =    20222.  T =     0.01 sec
ABC: Total time =     0.03 sec
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + &mfs 
ABC: + &ps -l 
ABC: <abc-temp-dir>/input : i/o =    830/    898  and =    2004  lev =   16 (0.89)  mem = 0.13 MB  box = 1112  bb = 541
ABC: Mapping (K=4)  :  lut =    660  edge =    2150  lev =   10 (0.54)  levB =   83  mem = 0.05 MB
ABC: LUT = 660 : 2=143 21.7 %  3=204 30.9 %  4=313 47.4 %  Ave = 3.26
ABC: + &write -n <abc-temp-dir>/output.aig 
ABC: + time 
ABC: elapse: 0.59 seconds, total: 0.59 seconds

2.47.16.6. Executing AIGER frontend.
<suppressed ~3910 debug messages>
Removed 2757 unused cells and 9984 unused wires.

2.47.16.7. Executing ABC9_OPS pass (helper functions for ABC9).
ABC RESULTS:              $lut cells:      661
ABC RESULTS:   $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 cells:      571
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:      588
Removing temp directory.

2.47.17. Executing TECHMAP pass (map to technology primitives).

2.47.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/abc9_unmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/abc9_unmap.v' to AST representation.
Generating RTLIL representation for module `\$__DFF_x__$abc9_flop'.
Generating RTLIL representation for module `\$__ABC9_SCC_BREAKER'.
Successfully finished Verilog frontend.

2.47.17.2. Continuing TECHMAP pass.
Using template $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1 for cells of type $paramod$__ICE40_CARRY_WRAPPER\LUT=16'0110100110010110\I3_IS_CI=1'1.
Using template $paramod\$__ABC9_SCC_BREAKER\WIDTH=32'00000000000000000000000000010100 for cells of type $__ABC9_SCC_BREAKER.
No more expansions possible.
<suppressed ~589 debug messages>

2.48. Executing ICE40_WRAPCARRY pass (wrap carries).

2.49. Executing TECHMAP pass (map to technology primitives).

2.49.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 551 unused cells and 15793 unused wires.

2.50. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      941
  1-LUT                1
  2-LUT              153
  3-LUT              474
  4-LUT              313
  with \SB_CARRY    (#0)  266
  with \SB_CARRY    (#1)  268

Eliminating LUTs.
Number of LUTs:      941
  1-LUT                1
  2-LUT              153
  3-LUT              474
  4-LUT              313
  with \SB_CARRY    (#0)  266
  with \SB_CARRY    (#1)  268

Combining LUTs.
Number of LUTs:      910
  1-LUT                1
  2-LUT              151
  3-LUT              415
  4-LUT              343
  with \SB_CARRY    (#0)  266
  with \SB_CARRY    (#1)  268

Eliminated 0 LUTs.
Combined 31 LUTs.
<suppressed ~5713 debug messages>

2.51. Executing TECHMAP pass (map to technology primitives).

2.51.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.51.2. Continuing TECHMAP pass.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10000000 for cells of type $lut.
Using template $paramod$eeb94fcd8e5392649fe04244642520b1ad9644c4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110101 for cells of type $lut.
Using template $paramod$8d41622da0aa87c171e3ad24745637a8e540bedc\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0111 for cells of type $lut.
Using template $paramod$8d7a8d6e3356de09670738ba85f2c6b874f6b06d\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod$7d35f3eb4056e6484203c99fe42cfcf1dfaba704\$lut for cells of type $lut.
Using template $paramod$1241d759e3df4cac11dc7c99c36b0d1b07f7a673\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0010 for cells of type $lut.
Using template $paramod$ba7c22fadfbf9ee7abcb895a21403114111dd201\$lut for cells of type $lut.
Using template $paramod$234fd643079033ba0cbc98ff572df9b7b7a0dc86\$lut for cells of type $lut.
Using template $paramod$fca001e3e0b52158a872e76e56c01ec10dfbb1de\$lut for cells of type $lut.
Using template $paramod$a15fd389a2f54cb7b94707b25934d226e68d9e2e\$lut for cells of type $lut.
Using template $paramod$658b9ed803f0d3d335616d3858b53e0a2522f1e8\$lut for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod$a28ff0c91df06a17817d22ac1b26118c8593f92f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1011 for cells of type $lut.
Using template $paramod$8fe6430e60e869b3f53dd416c6c3d3a0cc347153\$lut for cells of type $lut.
Using template $paramod$b4f15f202f50520dbc381cd0880ac94f830f05a8\$lut for cells of type $lut.
Using template $paramod$191987e4132f69ca46dd53dfa3f15f72d990cc0a\$lut for cells of type $lut.
Using template $paramod$60096d1cdb5f7f55fdf4ed3aab322b5c7375f61e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod$ea474c71a7a9bb027676021008daefb4ecbb4eb1\$lut for cells of type $lut.
Using template $paramod$1c2286bef9a6702a426ede0fc9afc3ceab10d154\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001000 for cells of type $lut.
Using template $paramod$27dd7ea71d2126c74d85758e5a06b7f432d9242f\$lut for cells of type $lut.
Using template $paramod$a5516fc31d1e552de2435200bb732b4d4ad63a9c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01001100 for cells of type $lut.
Using template $paramod$35747c4193cc59c2095f0a415365bd2a443730a2\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10101011 for cells of type $lut.
Using template $paramod$498daa9936ffa1c0b12d774cacc95a35d14b818e\$lut for cells of type $lut.
Using template $paramod$34ccb0403abd26609d9a7a8ea9a44b40cc4b3caf\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$58685d136f916910674b7cdb559b8c116c3484e1\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001000 for cells of type $lut.
Using template $paramod$5dc745bb48e2cf535179547ba13f0fe5364d6d54\$lut for cells of type $lut.
Using template $paramod$d76a082ac65b735f66c3b6bca13712f41180defa\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
Using template $paramod$70ebb6cf5bc7d63c5c1a98ccefefa2af79e8f2a9\$lut for cells of type $lut.
Using template $paramod$176a6ceafa512d807921d7dfc76320dfbbfb5fe4\$lut for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$52953750219effadf43093a566baf492fdd6b6c8\$lut for cells of type $lut.
Using template $paramod$101238f3d8d49ab12a9b49a2f01cd503b26e9c61\$lut for cells of type $lut.
Using template $paramod$66e741791413519a466d4f44240bc83d3a191818\$lut for cells of type $lut.
Using template $paramod$5c32c59025c0b98f20e63f249d83e7ebb4b085e3\$lut for cells of type $lut.
Using template $paramod$037be5c00d8a02858cdb1ab049b58a0133287ff1\$lut for cells of type $lut.
Using template $paramod$c5f3c57a6d466a2f42208bafb8985b96ce884440\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10111111 for cells of type $lut.
Using template $paramod$d35161d1d7976dcc02e7c7d51172431be85143b4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10110011 for cells of type $lut.
Using template $paramod$e277a522d8a930c8c8c8cdb56d33d42914aefec4\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000010 for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00110001 for cells of type $lut.
Using template $paramod$9d1915f40715c7f715525567f7dfd63744c26c4a\$lut for cells of type $lut.
Using template $paramod$608f40069c27841a5b3bdf03643a34bdc8974072\$lut for cells of type $lut.
Using template $paramod$20aecb9a781743d0e93608b1c1e7d62ffc3a69a9\$lut for cells of type $lut.
Using template $paramod$364c9ffbffac467d60dfec81bba4e18476c15602\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001101 for cells of type $lut.
Using template $paramod$e01a027fedb28671a20c130493a89c7afd4e87d3\$lut for cells of type $lut.
Using template $paramod$73d07df06bdcebf8bcc513075902f140fba061ec\$lut for cells of type $lut.
Using template $paramod$ea9f0804ffa1047d479d3e00429394419ff5856b\$lut for cells of type $lut.
Using template $paramod$722bfd9af0ae56ca9d1d12a221cb5ede16461f26\$lut for cells of type $lut.
Using template $paramod$1b0f69f0f1eadfdbabb12c16b846a5e89746fd2e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001110 for cells of type $lut.
Using template $paramod$7aee9f69444623e4c83a876d7b49067bd9373c95\$lut for cells of type $lut.
Using template $paramod$7a02e05acb86bef14143e0e435fb2c7bb50c485b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01010011 for cells of type $lut.
Using template $paramod$76186ffed21f9c4f6bd22a6d95b6accb5cd101ae\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11101111 for cells of type $lut.
Using template $paramod$949912d41b6703327b37a3cbe8a7a7bc923219b7\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'01101100 for cells of type $lut.
Using template $paramod$8b24407096beec47292ddeb1567a058197a320b9\$lut for cells of type $lut.
Using template $paramod$c06ea16ad3109b11a553c0ad1d5d01808734d65f\$lut for cells of type $lut.
Using template $paramod$4888f2121a1fba4d507203534ae54782bc81e02e\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod$cdfb4ce36e9b97ab980954e4bd7262833a7086a8\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$3eb8805ccd6f91bad96dcbf190c2fb4f72f4634f\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
No more expansions possible.
<suppressed ~2174 debug messages>
Removed 0 unused cells and 1952 unused wires.

2.52. Executing AUTONAME pass.
Renamed 40313 objects in module Goldschmidt_Integer_Divider (237 iterations).
<suppressed ~3193 debug messages>

2.53. Executing HIERARCHY pass (managing design hierarchy).

2.53.1. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider

2.53.2. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider
Removed 0 unused modules.

2.54. Printing statistics.

=== Goldschmidt_Integer_Divider ===

   Number of wires:               1422
   Number of wire bits:           3996
   Number of public wires:        1422
   Number of public wire bits:    3996
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1795
     SB_CARRY                      566
     SB_DFFE                        67
     SB_DFFESR                     230
     SB_DFFSR                        5
     SB_DFFSS                        2
     SB_LUT4                       910
     SB_MAC16                       15

2.55. Executing CHECK pass (checking for obvious problems).
Checking module Goldschmidt_Integer_Divider...
Found and reported 0 problems.

2.56. Executing JSON backend.

3. Executing JSON backend.

End of script. Logfile hash: b01b0556f2, CPU: user 4.90s system 0.02s, MEM: 59.28 MB peak
Yosys 0.9+4245 (git sha1 2e421feb, gcc 10.3.0-1ubuntu1~20.10 -fPIC -Os)
Time spent: 17% 44x opt_expr (0 sec), 12% 12x techmap (0 sec), ...
