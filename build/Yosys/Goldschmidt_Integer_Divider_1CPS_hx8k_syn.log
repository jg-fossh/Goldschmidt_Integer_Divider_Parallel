
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3814 (git sha1 da1d06d7, gcc 10.2.0-13ubuntu1 -fPIC -Os)


-- Executing script file `syn_ice40.ys' --

1. Executing Verilog-2005 frontend: ../../source/Goldschmidt_Integer_Divider_1CPS.v
Parsing Verilog input from `../../source/Goldschmidt_Integer_Divider_1CPS.v' to AST representation.
Generating RTLIL representation for module `\Goldschmidt_Integer_Divider_1CPS'.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider_1CPS

2.2.2. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider_1CPS
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$325 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$318 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$314 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$307 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$304 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$301 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$298 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$295 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$287 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$280 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$276 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$269 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$266 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$263 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$260 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$257 in module SB_DFFSR.
Marked 1 switch rules as full_case in process $proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:433$77 in module Goldschmidt_Integer_Divider_1CPS.
Marked 3 switch rules as full_case in process $proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71 in module Goldschmidt_Integer_Divider_1CPS.
Marked 13 switch rules as full_case in process $proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48 in module Goldschmidt_Integer_Divider_1CPS.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 12 redundant assignments.
Promoted 24 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$328'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$324'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$317'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$313'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$306'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$303'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$300'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$297'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$294'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$292'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$290'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$286'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$279'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$275'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$268'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$265'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$262'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$259'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$256'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
  Set init value: \Q = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$325'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$314'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$304'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$298'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$287'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$276'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$266'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$260'.

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$328'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$325'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$324'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$318'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$317'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$314'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$313'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$307'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$306'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$304'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$303'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$301'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$300'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$298'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$297'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$295'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$294'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$293'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$292'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$291'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$290'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$287'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$286'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$280'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$279'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$276'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$275'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$269'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$268'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$266'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$265'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$263'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$262'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$260'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$259'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$257'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$256'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$255'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$253'.
Creating decoders for process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:464$82'.
     1/1: $0\r_product1[3:0]
Creating decoders for process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:452$79'.
     1/1: $0\r_product0[3:0]
Creating decoders for process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:433$77'.
     1/2: $1\iter[31:0]
     2/2: $1\w_lut_value[0:0]
Creating decoders for process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
     1/4: $0\r_div_wb4_ack[0:0]
     2/4: $0\r_div_wb4_stall[0:0]
     3/4: $0\r_div_wb4_stb[0:0]
     4/4: $0\r_div_wb4_result[0:0]
Creating decoders for process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
     1/12: $0\r_divider_state[4:0]
     2/12: $0\r_div_acc_ack[0:0]
     3/12: $0\r_div_acc_stall[0:0]
     4/12: $0\r_div_acc_stb[0:0]
     5/12: $0\r_converged[0:0]
     6/12: $0\r_multiplier[1:0]
     7/12: $0\r_multiplicand[1:0]
     8/12: $0\r_signed_extend[0:0]
     9/12: $0\r_calculate_remainder[0:0]
    10/12: $0\r_divisor[0:0]
    11/12: $0\r_divisor_acc[1:0]
    12/12: $0\r_dividend_acc[1:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\Goldschmidt_Integer_Divider_1CPS.\w_lut_value' from process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:433$77': $auto$proc_dlatch.cc:430:proc_dlatch$872
Latch inferred for signal `\Goldschmidt_Integer_Divider_1CPS.\iter' from process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:433$77': $auto$proc_dlatch.cc:430:proc_dlatch$883

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$325'.
  created $adff cell `$procdff$884' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$318'.
  created $dff cell `$procdff$885' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$314'.
  created $adff cell `$procdff$886' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$307'.
  created $dff cell `$procdff$887' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$304'.
  created $adff cell `$procdff$888' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$301'.
  created $dff cell `$procdff$889' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$298'.
  created $adff cell `$procdff$890' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$295'.
  created $dff cell `$procdff$891' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$293'.
  created $dff cell `$procdff$892' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$291'.
  created $dff cell `$procdff$893' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$287'.
  created $adff cell `$procdff$894' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$280'.
  created $dff cell `$procdff$895' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$276'.
  created $adff cell `$procdff$896' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$269'.
  created $dff cell `$procdff$897' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$266'.
  created $adff cell `$procdff$898' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$263'.
  created $dff cell `$procdff$899' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$260'.
  created $adff cell `$procdff$900' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$257'.
  created $dff cell `$procdff$901' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$255'.
  created $dff cell `$procdff$902' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$253'.
  created $dff cell `$procdff$903' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_product1' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:464$82'.
  created $dff cell `$procdff$904' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_product0' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:452$79'.
  created $dff cell `$procdff$905' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_wb4_stb' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
  created $dff cell `$procdff$906' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_wb4_ack' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
  created $dff cell `$procdff$907' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_wb4_result' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
  created $dff cell `$procdff$908' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_wb4_stall' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
  created $dff cell `$procdff$909' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_divider_state' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$910' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_dividend_acc' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_divisor_acc' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_divisor' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$913' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_calculate_remainder' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$914' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_signed_extend' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$915' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_multiplicand' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$916' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_multiplier' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$917' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_converged' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$918' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_acc_stb' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$919' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_acc_stall' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$920' with positive edge clock.
Creating register for signal `\Goldschmidt_Integer_Divider_1CPS.\r_div_acc_ack' using process `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
  created $dff cell `$procdff$921' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$328'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$325'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$325'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$324'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$318'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$318'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$317'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$314'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$314'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$313'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$307'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$307'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$306'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$304'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$303'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$301'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$301'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$300'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$298'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$297'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$295'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$295'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$294'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$293'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$293'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$292'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$291'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$290'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$287'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$287'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$286'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$280'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$280'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$279'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$276'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$276'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$275'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$269'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$269'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$268'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$266'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$265'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$263'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$263'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$262'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$260'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$259'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$257'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$257'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$256'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$255'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$255'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$254'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$253'.
Found and cleaned up 1 empty switch in `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:464$82'.
Removing empty process `Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:464$82'.
Found and cleaned up 1 empty switch in `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:452$79'.
Removing empty process `Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:452$79'.
Found and cleaned up 1 empty switch in `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:433$77'.
Removing empty process `Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:433$77'.
Found and cleaned up 3 empty switches in `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
Removing empty process `Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:395$71'.
Found and cleaned up 13 empty switches in `\Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
Removing empty process `Goldschmidt_Integer_Divider_1CPS.$proc$../../source/Goldschmidt_Integer_Divider_1CPS.v:232$48'.
Cleaned up 37 empty switches.

2.4. Executing FLATTEN pass (flatten design).

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~104 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 17 unused cells and 206 unused wires.
<suppressed ~29 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
Checking module Goldschmidt_Integer_Divider_1CPS...
Warning: Wire Goldschmidt_Integer_Divider_1CPS.\o_wb4_master_stb is used but has no driver.
Warning: found logic loop in module Goldschmidt_Integer_Divider_1CPS:
    cell $and$../../source/Goldschmidt_Integer_Divider_1CPS.v:216$47 ($and)
    wire \w_div_acc_stall
Found and reported 2 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$664: \r_multiplicand [0] -> 1'0
      Replacing known input bits on port B of cell $procmux$849: { 1'0 \i_wb4_slave_data [0] } -> 2'01
      Replacing known input bits on port A of cell $ternary$../../source/Goldschmidt_Integer_Divider_1CPS.v:182$10: \i_wb4_slave_data [0] -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$proc_dlatch.cc:430:proc_dlatch$872 ($dlatch) from module Goldschmidt_Integer_Divider_1CPS.

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking Goldschmidt_Integer_Divider_1CPS.r_divider_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking Goldschmidt_Integer_Divider_1CPS.r_multiplicand as FSM state register:
    Users of register don't seem to benefit from recoding.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$921 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$598_Y, Q = \r_div_acc_ack, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$922 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$598_Y, Q = \r_div_acc_ack).
Adding EN signal on $procdff$920 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$618_Y, Q = \r_div_acc_stall).
Adding SRST signal on $procdff$919 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$639_Y, Q = \r_div_acc_stb, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$947 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$637_Y, Q = \r_div_acc_stb).
Adding SRST signal on $procdff$918 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$671_Y, Q = \r_converged, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$959 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$669_Y, Q = \r_converged).
Adding SRST signal on $procdff$917 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$709_Y, Q = \r_multiplier, rval = 2'00).
Adding EN signal on $auto$opt_dff.cc:702:run$969 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$709_Y, Q = \r_multiplier).
Adding EN signal on $procdff$916 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = 2'00, Q = \r_multiplicand).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:764:run$989 ($dffe) from module Goldschmidt_Integer_Divider_1CPS.
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:764:run$989 ($dffe) from module Goldschmidt_Integer_Divider_1CPS.
Adding SRST signal on $procdff$915 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$743_Y, Q = \r_signed_extend, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$990 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$724_Y, Q = \r_signed_extend).
Adding SRST signal on $procdff$914 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$756_Y, Q = \r_calculate_remainder, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1000 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = \i_wb4_slave_tgd [1], Q = \r_calculate_remainder).
Adding SRST signal on $procdff$913 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$784_Y, Q = \r_divisor, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1004 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = \w_divisor, Q = \r_divisor).
Adding SRST signal on $procdff$912 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$820_Y, Q = \r_divisor_acc, rval = 2'00).
Adding EN signal on $auto$opt_dff.cc:702:run$1014 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$820_Y, Q = \r_divisor_acc).
Adding SRST signal on $procdff$911 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$859_Y, Q = \r_dividend_acc, rval = 2'00).
Adding EN signal on $auto$opt_dff.cc:702:run$1026 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$859_Y, Q = \r_dividend_acc).
Adding SRST signal on $procdff$910 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$581_Y, Q = \r_divider_state, rval = 5'00001).
Adding SRST signal on $procdff$909 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = \i_wb4_master_stall, Q = \r_div_wb4_stall, rval = 1'1).
Adding SRST signal on $procdff$908 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$540_Y, Q = \r_div_wb4_result, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:702:run$1038 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = \w_result, Q = \r_div_wb4_result).
Adding EN signal on $procdff$905 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81_Y, Q = \r_product0).
Adding EN signal on $procdff$904 ($dff) from module Goldschmidt_Integer_Divider_1CPS (D = $mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:467$84_Y, Q = \r_product1).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 37 unused cells and 37 unused wires.
<suppressed ~38 debug messages>

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~19 debug messages>

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$833.
    dead port 2/2 on $mux $procmux$833.
Removed 2 multiplexer ports.
<suppressed ~15 debug messages>

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$987: { $auto$opt_dff.cc:217:make_patterns_logic$970 $auto$opt_dff.cc:217:make_patterns_logic$972 $auto$opt_dff.cc:217:make_patterns_logic$974 $auto$opt_dff.cc:217:make_patterns_logic$976 $auto$opt_dff.cc:217:make_patterns_logic$978 $auto$opt_dff.cc:217:make_patterns_logic$980 $auto$opt_dff.cc:217:make_patterns_logic$982 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$1034: { $auto$opt_dff.cc:217:make_patterns_logic$1027 $auto$opt_dff.cc:217:make_patterns_logic$1029 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$1024: { $auto$opt_dff.cc:217:make_patterns_logic$1015 $auto$opt_dff.cc:217:make_patterns_logic$1017 $auto$opt_dff.cc:217:make_patterns_logic$1021 }
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 3 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~3 debug messages>

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$955: { $auto$opt_dff.cc:217:make_patterns_logic$948 $auto$rtlil.cc:2121:Not$953 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:243:make_patterns_logic$1024: { $auto$opt_dff.cc:217:make_patterns_logic$1015 $auto$opt_dff.cc:217:make_patterns_logic$1017 }
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 2 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.12.23. Rerunning OPT passes. (Maybe there is more to do..)

2.12.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

2.12.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.12.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.12.27. Executing OPT_DFF pass (perform DFF optimizations).

2.12.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.12.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.12.30. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell Goldschmidt_Integer_Divider_1CPS.$add$../../source/Goldschmidt_Integer_Divider_1CPS.v:195$22 ($add).
Removed top 30 bits (of 32) from port Y of cell Goldschmidt_Integer_Divider_1CPS.$add$../../source/Goldschmidt_Integer_Divider_1CPS.v:195$22 ($add).
Removed top 30 bits (of 32) from mux cell Goldschmidt_Integer_Divider_1CPS.$ternary$../../source/Goldschmidt_Integer_Divider_1CPS.v:195$24 ($mux).
Removed top 31 bits (of 32) from mux cell Goldschmidt_Integer_Divider_1CPS.$ternary$../../source/Goldschmidt_Integer_Divider_1CPS.v:194$26 ($mux).
Removed top 31 bits (of 32) from mux cell Goldschmidt_Integer_Divider_1CPS.$ternary$../../source/Goldschmidt_Integer_Divider_1CPS.v:198$33 ($mux).
Removed top 31 bits (of 32) from port A of cell Goldschmidt_Integer_Divider_1CPS.$eq$../../source/Goldschmidt_Integer_Divider_1CPS.v:266$53 ($eq).
Removed top 30 bits (of 32) from port B of cell Goldschmidt_Integer_Divider_1CPS.$eq$../../source/Goldschmidt_Integer_Divider_1CPS.v:266$53 ($eq).
Removed top 31 bits (of 32) from port A of cell Goldschmidt_Integer_Divider_1CPS.$eq$../../source/Goldschmidt_Integer_Divider_1CPS.v:273$54 ($eq).
Removed top 31 bits (of 32) from port B of cell Goldschmidt_Integer_Divider_1CPS.$eq$../../source/Goldschmidt_Integer_Divider_1CPS.v:273$54 ($eq).
Removed top 1 bits (of 2) from port A of cell Goldschmidt_Integer_Divider_1CPS.$not$../../source/Goldschmidt_Integer_Divider_1CPS.v:277$58 ($not).
Removed top 2 bits (of 4) from port A of cell Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81 ($mul).
Removed top 2 bits (of 4) from port B of cell Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81 ($mul).
Removed top 2 bits (of 4) from port A of cell Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:467$84 ($mul).
Removed top 2 bits (of 4) from port B of cell Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:467$84 ($mul).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$587 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$589 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$591 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$593 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$605 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$607 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$609 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$611 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$613 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$637 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$687 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$689 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$693 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$696 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$699 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$702 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$705 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$707 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$798 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$800 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$818 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$auto$opt_dff.cc:764:run$968 ($sdffe).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$837 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$839 ($mux).
Removed cell Goldschmidt_Integer_Divider_1CPS.$procmux$857 ($mux).
Removed top 1 bits (of 4) from FF cell Goldschmidt_Integer_Divider_1CPS.$auto$opt_dff.cc:764:run$1041 ($dffe).
Removed top 1 bits (of 4) from FF cell Goldschmidt_Integer_Divider_1CPS.$auto$opt_dff.cc:764:run$1040 ($dffe).
Removed top 1 bits (of 2) from mux cell Goldschmidt_Integer_Divider_1CPS.$ternary$../../source/Goldschmidt_Integer_Divider_1CPS.v:195$24 ($mux).
Removed top 1 bits (of 4) from port Y of cell Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81 ($mul).
Removed top 1 bits (of 4) from port Y of cell Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:467$84 ($mul).
Removed top 1 bits (of 2) from port Y of cell Goldschmidt_Integer_Divider_1CPS.$add$../../source/Goldschmidt_Integer_Divider_1CPS.v:195$22 ($add).
Removed top 31 bits (of 32) from wire Goldschmidt_Integer_Divider_1CPS.$add$../../source/Goldschmidt_Integer_Divider_1CPS.v:195$22_Y.
Removed top 1 bits (of 4) from wire Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81_Y.
Removed top 1 bits (of 4) from wire Goldschmidt_Integer_Divider_1CPS.$mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:467$84_Y.
Removed top 1 bits (of 4) from wire Goldschmidt_Integer_Divider_1CPS.r_product0.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 3 unused cells and 33 unused wires.
<suppressed ~4 debug messages>

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~6 debug messages>

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 17 unused cells and 22 unused wires.
<suppressed ~22 debug messages>

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module Goldschmidt_Integer_Divider_1CPS:
  creating $macc model for $mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81 ($mul).
  creating $macc cell for $mul$../../source/Goldschmidt_Integer_Divider_1CPS.v:455$81: $auto$alumacc.cc:365:replace_macc$1046
  created 0 $alu and 1 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.21.9. Rerunning OPT passes. (Maybe there is more to do..)

2.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.21.13. Executing OPT_DFF pass (perform DFF optimizations).

2.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.21.16. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~9 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$547:
      Old ports: A=5'00001, B=5'10000, Y=$procmux$547_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$547_Y [4] $procmux$547_Y [0] }
      New connections: $procmux$547_Y [3:1] = 3'000
    Consolidated identical input bits for $mux cell $procmux$565:
      Old ports: A=5'00010, B=5'10000, Y=$procmux$565_Y
      New ports: A=2'01, B=2'10, Y={ $procmux$565_Y [4] $procmux$565_Y [1] }
      New connections: { $procmux$565_Y [3:2] $procmux$565_Y [0] } = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$549:
      Old ports: A=5'00001, B=$procmux$547_Y, Y=$procmux$549_Y
      New ports: A=2'01, B={ $procmux$547_Y [4] $procmux$547_Y [0] }, Y={ $procmux$549_Y [4] $procmux$549_Y [0] }
      New connections: $procmux$549_Y [3:1] = 3'000
    Consolidated identical input bits for $mux cell $procmux$568:
      Old ports: A=$procmux$565_Y, B=5'10000, Y=$procmux$568_Y
      New ports: A={ $procmux$565_Y [4] $procmux$565_Y [1] }, B=2'10, Y={ $procmux$568_Y [4] $procmux$568_Y [1] }
      New connections: { $procmux$568_Y [3:2] $procmux$568_Y [0] } = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$551:
      Old ports: A=$procmux$549_Y, B=5'10000, Y=$procmux$551_Y
      New ports: A={ $procmux$549_Y [4] $procmux$549_Y [0] }, B=2'10, Y={ $procmux$551_Y [4] $procmux$551_Y [0] }
      New connections: $procmux$551_Y [3:1] = 3'000
    Consolidated identical input bits for $mux cell $procmux$571:
      Old ports: A=$procmux$568_Y, B=5'10000, Y=$procmux$571_Y
      New ports: A={ $procmux$568_Y [4] $procmux$568_Y [1] }, B=2'10, Y={ $procmux$571_Y [4] $procmux$571_Y [1] }
      New connections: { $procmux$571_Y [3:2] $procmux$571_Y [0] } = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$559:
      Old ports: A=$procmux$551_Y, B=5'00100, Y=$procmux$559_Y
      New ports: A={ $procmux$551_Y [4] 1'0 $procmux$551_Y [0] }, B=3'010, Y={ $procmux$559_Y [4] $procmux$559_Y [2] $procmux$559_Y [0] }
      New connections: { $procmux$559_Y [3] $procmux$559_Y [1] } = 2'00
    Consolidated identical input bits for $mux cell $procmux$574:
      Old ports: A=5'10000, B=$procmux$571_Y, Y=$procmux$574_Y
      New ports: A=2'10, B={ $procmux$571_Y [4] $procmux$571_Y [1] }, Y={ $procmux$574_Y [4] $procmux$574_Y [1] }
      New connections: { $procmux$574_Y [3:2] $procmux$574_Y [0] } = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$561:
      Old ports: A=$procmux$559_Y, B=5'00100, Y=$procmux$561_Y
      New ports: A={ $procmux$559_Y [4] $procmux$559_Y [2] $procmux$559_Y [0] }, B=3'010, Y={ $procmux$561_Y [4] $procmux$561_Y [2] $procmux$561_Y [0] }
      New connections: { $procmux$561_Y [3] $procmux$561_Y [1] } = 2'00
    Consolidated identical input bits for $mux cell $procmux$577:
      Old ports: A=5'10000, B=$procmux$574_Y, Y=$procmux$577_Y
      New ports: A=2'10, B={ $procmux$574_Y [4] $procmux$574_Y [1] }, Y={ $procmux$577_Y [4] $procmux$577_Y [1] }
      New connections: { $procmux$577_Y [3:2] $procmux$577_Y [0] } = 3'000
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$579:
      Old ports: A=5'00001, B=$procmux$577_Y, Y=$procmux$579_Y
      New ports: A=3'001, B={ $procmux$577_Y [4] $procmux$577_Y [1] 1'0 }, Y={ $procmux$579_Y [4] $procmux$579_Y [1:0] }
      New connections: $procmux$579_Y [3:2] = 2'00
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
    Consolidated identical input bits for $mux cell $procmux$581:
      Old ports: A=$procmux$561_Y, B=$procmux$579_Y, Y=$procmux$581_Y
      New ports: A={ $procmux$561_Y [4] $procmux$561_Y [2] 1'0 $procmux$561_Y [0] }, B={ $procmux$579_Y [4] 1'0 $procmux$579_Y [1:0] }, Y={ $procmux$581_Y [4] $procmux$581_Y [2:0] }
      New connections: $procmux$581_Y [3] = 1'0
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 12 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:702:run$1036 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$565_Y [1], Q = \r_divider_state [1], rval = 1'0).
Adding SRST signal on $auto$opt_dff.cc:702:run$1036 ($sdff) from module Goldschmidt_Integer_Divider_1CPS (D = $procmux$561_Y [2], Q = \r_divider_state [2], rval = 1'0).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

2.29.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 1 on $auto$opt_dff.cc:702:run$1036 ($sdff) from module Goldschmidt_Integer_Divider_1CPS.

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~5 debug messages>

2.29.16. Rerunning OPT passes. (Maybe there is more to do..)

2.29.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.29.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.29.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.29.20. Executing OPT_DFF pass (perform DFF optimizations).

2.29.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.29.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.29.23. Rerunning OPT passes. (Maybe there is more to do..)

2.29.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Goldschmidt_Integer_Divider_1CPS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

2.29.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Goldschmidt_Integer_Divider_1CPS.
Performed a total of 0 changes.

2.29.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.29.27. Executing OPT_DFF pass (perform DFF optimizations).

2.29.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.29.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.29.30. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdff.
Using extmapper maccmap for cells of type $macc.
  add \r_dividend_acc * \r_multiplier (2x2 bits, signed)
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod\_90_fa\WIDTH=3 for cells of type $fa.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~189 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~86 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~129 debug messages>
Removed a total of 43 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 10 unused cells and 101 unused wires.
<suppressed ~11 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider_1CPS.$auto$maccmap.cc:240:synth$1152.slice[0].carry: CO=1'0

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~1 debug messages>

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$simplemap.cc:527:simplemap_adff_sdff$1199 ($_SDFF_PP0_) from module Goldschmidt_Integer_Divider_1CPS (D = 1'1, Q = \r_divider_state [2]).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 3 unused cells and 0 unused wires.
<suppressed ~3 debug messages>

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) Goldschmidt_Integer_Divider_1CPS.$auto$maccmap.cc:240:synth$1152.slice[1].carry: CO=1'0

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.33.12. Rerunning OPT passes. (Removed registers in this run.)

2.33.13. Running ICE40 specific optimizations.

2.33.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.33.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.33.16. Executing OPT_DFF pass (perform DFF optimizations).

2.33.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.33.18. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
Using template \$_SDFFCE_PP0P_ for cells of type $_SDFFCE_PP0P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_SDFF_PP1_ for cells of type $_SDFF_PP1_.
No more expansions possible.
<suppressed ~39 debug messages>

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping Goldschmidt_Integer_Divider_1CPS.$auto$maccmap.cc:240:synth$1152.slice[1].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.
<suppressed ~21 debug messages>

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..
Removed 1 unused cells and 102 unused wires.
<suppressed ~2 debug messages>

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Goldschmidt_Integer_Divider_1CPS.

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Goldschmidt_Integer_Divider_1CPS'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Goldschmidt_Integer_Divider_1CPS..

2.38.12. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

2.40. Executing ABC pass (technology mapping using ABC).

2.40.1. Extracting gate netlist of module `\Goldschmidt_Integer_Divider_1CPS' to `<abc-temp-dir>/input.blif'..
Breaking loop using new signal $abcloop$1580: \w_div_acc_stall -> \w_div_acc_stall
Extracted 105 gates and 129 wires to a netlist network with 22 inputs and 26 outputs.

2.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      30.
ABC: Participating nodes from both networks       =      65.
ABC: Participating nodes from the first network   =      29. (  93.55 % of nodes)
ABC: Participating nodes from the second network  =      36. ( 116.13 % of nodes)
ABC: Node pairs (any polarity)                    =      29. (  93.55 % of names can be moved)
ABC: Node pairs (same polarity)                   =      29. (  93.55 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       30
ABC RESULTS:        internal signals:       81
ABC RESULTS:           input signals:       22
ABC RESULTS:          output signals:       26
Removing temp directory.

2.41. Executing ICE40_WRAPCARRY pass (wrap carries).

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 1 unused cells and 112 unused wires.

2.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       30
  2-LUT               12
  3-LUT               11
  4-LUT                7

Eliminating LUTs.
Number of LUTs:       30
  2-LUT               12
  3-LUT               11
  4-LUT                7

Combining LUTs.
Number of LUTs:       29
  2-LUT               11
  3-LUT               10
  4-LUT                8

Eliminated 0 LUTs.
Combined 1 LUTs.
<suppressed ~94 debug messages>

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011110001011010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
No more expansions possible.
<suppressed ~305 debug messages>
Removed 0 unused cells and 60 unused wires.

2.45. Executing AUTONAME pass.
Renamed 152 objects in module Goldschmidt_Integer_Divider_1CPS (9 iterations).
<suppressed ~70 debug messages>

2.46. Executing HIERARCHY pass (managing design hierarchy).

2.46.1. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider_1CPS

2.46.2. Analyzing design hierarchy..
Top module:  \Goldschmidt_Integer_Divider_1CPS
Removed 0 unused modules.

2.47. Printing statistics.

=== Goldschmidt_Integer_Divider_1CPS ===

   Number of wires:                 55
   Number of wire bits:             79
   Number of public wires:          55
   Number of public wire bits:      79
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     SB_DFFE                         3
     SB_DFFESR                      10
     SB_DFFSR                        2
     SB_DFFSS                        2
     SB_LUT4                        29

2.48. Executing CHECK pass (checking for obvious problems).
Checking module Goldschmidt_Integer_Divider_1CPS...
Found and reported 0 problems.

2.49. Executing JSON backend.

3. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 959d8843d4, CPU: user 0.63s system 0.02s, MEM: 55.68 MB peak
Yosys 0.9+3814 (git sha1 da1d06d7, gcc 10.2.0-13ubuntu1 -fPIC -Os)
Time spent: 25% 12x read_verilog (0 sec), 15% 1x abc (0 sec), ...
